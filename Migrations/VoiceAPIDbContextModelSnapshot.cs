// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoiceAPI.DbContextVoiceAPI;
using VoiceAPI.Entities.Enums;

namespace VoiceAPI.Migrations
{
    [DbContext(typeof(VoiceAPIDbContext))]
    partial class VoiceAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "Accent", new[] { "north", "mid", "south", "other" })
                .HasPostgresEnum(null, "AccountStatus", new[] { "inactive", "active", "blocked", "deleted" })
                .HasPostgresEnum(null, "Gender", new[] { "male", "female", "other" })
                .HasPostgresEnum(null, "JobInvitationStatus", new[] { "pending", "not_accepted", "accepted" })
                .HasPostgresEnum(null, "JobStatus", new[] { "pending", "processing", "finished", "deleted" })
                .HasPostgresEnum(null, "OrderStatus", new[] { "pending", "processing", "finished", "rejected" })
                .HasPostgresEnum(null, "Role", new[] { "candidate", "enterprise" })
                .HasPostgresEnum(null, "TransactionType", new[] { "receive", "send", "deposit", "refunded", "unlock" })
                .HasPostgresEnum(null, "WorkingStatus", new[] { "available", "unavailable" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("VoiceAPI.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<RoleEnum>("Role")
                        .HasColumnType("\"Role\"");

                    b.Property<AccountStatusEnum>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"AccountStatus\"")
                        .HasDefaultValue(AccountStatusEnum.INACTIVE);

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<AccentEnum>("Accent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"Accent\"")
                        .HasDefaultValue(AccentEnum.OTHER);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("EmailContact")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<GenderEnum?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"Gender\"")
                        .HasDefaultValue(GenderEnum.OTHER);

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<WorkingStatusEnum>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"WorkingStatus\"")
                        .HasDefaultValue(WorkingStatusEnum.AVAILABLE);

                    b.Property<List<string>>("SubCategorieNames")
                        .HasColumnType("text[]");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("VoiceAPI.Entities.ConversationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("OrderId");

                    b.ToTable("ConversationSchedule");
                });

            modelBuilder.Entity("VoiceAPI.Entities.District", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.HasKey("Code");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("District");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("EmailContact")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Enterprise");
                });

            modelBuilder.Entity("VoiceAPI.Entities.FavouriteJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("FavouriteJob");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DayDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<int?>("HourDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<JobStatusEnum>("JobStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"JobStatus\"")
                        .HasDefaultValue(JobStatusEnum.PENDING);

                    b.Property<int?>("MinuteDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("VoiceAPI.Entities.JobInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<JobInvitationStatusEnum>("Status")
                        .HasColumnType("\"JobInvitationStatus\"");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("JobInvitation");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<OrderStatusEnum>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("\"OrderStatus\"")
                        .HasDefaultValue(OrderStatusEnum.PENDING);

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Code");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTrue")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VoiceLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("ReviewPoint")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("VoiceAPI.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("VoiceAPI.Entities.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<TransactionTypeEnum>("TransactionType")
                        .HasColumnType("\"TransactionType\"");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("JobId");

                    b.HasIndex("WalletId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("VoiceAPI.Entities.VoiceDemo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("TextTranscript")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Tone")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("VoiceDemo");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvailableBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("DepositCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("LockedBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("DepositCode")
                        .IsUnique();

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Ward", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Code");

                    b.HasIndex("DistrictCode");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Candidate", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Account", "Account")
                        .WithOne("Candidate")
                        .HasForeignKey("VoiceAPI.Entities.Candidate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VoiceAPI.Entities.ConversationSchedule", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Candidate", "Candidate")
                        .WithMany("ConversationSchedules")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.Enterprise", "Enterprise")
                        .WithMany("ConversationSchedules")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Enterprise");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VoiceAPI.Entities.District", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Enterprise", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Account", "Account")
                        .WithOne("Enterprise")
                        .HasForeignKey("VoiceAPI.Entities.Enterprise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VoiceAPI.Entities.FavouriteJob", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Candidate", "Candidate")
                        .WithMany("FavouriteJob")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.Job", "Job")
                        .WithMany("FavouriteJob")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Job", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Enterprise", "Enterprise")
                        .WithMany("Jobs")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.SubCategory", "SubCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("VoiceAPI.Entities.JobInvitation", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Candidate", "Candidate")
                        .WithMany("JobInvitations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.Job", "Job")
                        .WithOne("JobInvitation")
                        .HasForeignKey("VoiceAPI.Entities.JobInvitation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Order", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.Job", "Job")
                        .WithMany("Order")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Report", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Order", "Order")
                        .WithOne("Report")
                        .HasForeignKey("VoiceAPI.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Review", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Order", "Order")
                        .WithOne("Review")
                        .HasForeignKey("VoiceAPI.Entities.Review", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VoiceAPI.Entities.SubCategory", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VoiceAPI.Entities.TransactionHistory", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("VoiceAPI.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("VoiceAPI.Entities.Wallet", "Wallet")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Job");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("VoiceAPI.Entities.VoiceDemo", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Candidate", "Candidate")
                        .WithMany("VoiceDemos")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceAPI.Entities.SubCategory", "SubCategory")
                        .WithMany("VoiceDemos")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Wallet", b =>
                {
                    b.HasOne("VoiceAPI.Entities.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("VoiceAPI.Entities.Wallet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Ward", b =>
                {
                    b.HasOne("VoiceAPI.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Account", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Enterprise");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Candidate", b =>
                {
                    b.Navigation("ConversationSchedules");

                    b.Navigation("FavouriteJob");

                    b.Navigation("JobInvitations");

                    b.Navigation("VoiceDemos");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("VoiceAPI.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Enterprise", b =>
                {
                    b.Navigation("ConversationSchedules");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Job", b =>
                {
                    b.Navigation("FavouriteJob");

                    b.Navigation("JobInvitation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Order", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("VoiceAPI.Entities.SubCategory", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("VoiceDemos");
                });

            modelBuilder.Entity("VoiceAPI.Entities.Wallet", b =>
                {
                    b.Navigation("TransactionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
